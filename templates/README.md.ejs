<%= name %>
<%= ''.padStart(name.length, '=')  %>

This WordPress <%= type %> project was bootstrapped with [wordup](https://wordup.dev)

Happy Coding üöÄ

## Project setup 

To setup your development server, run the following command in your project folder:

```
$ wordup install
```

or if it's already installed:

```
$ wordup start
```

Wordup uses the nodejs package.json file to save the project specific settings. 
Feel free to change the package.json file for project specific needs (e.g. webpack). 

Keep in mind: If you want to change the slug in package.json, you have to reinstall the project afterwards.

### Use wordup-cli locally

You have also the option to use wordup-cli locally as a devDependency in your package.json file. 
If you want run a wordup command from your local package,  use `npx` before `wordup`. For example:

```
$ npx wordup start
```

## Caution ‚ö†Ô∏è

DON'T delete this <%= type %> in the WP-Admin, you will lose your src files.

That's why we also recommend to use a VCS like Git.

<% if (type == 'plugin') { %>
## Setup a WordPress plugin

Essential files for your WordPress plugin:

Create a file called `<%= slug %>.php` in /src folder with a doctype like this:

```
/**
 * Plugin Name:     <%= name %>
 * Plugin URI:      PLUGIN SITE HERE
 * Description:     PLUGIN DESCRIPTION HERE
 * Author:          YOUR NAME HERE
 * Author URI:      YOUR SITE HERE
 * Text Domain:     <%= slug %>
 * Domain Path:     /languages
 * Version:         0.1.0
 *
 * @package         <%= slug %>
 */
```

<% } %>

<% if (type == 'theme') { %>
## Setup WordPress theme

There are two essential files for a WordPress theme:

`style.css` file with a doctype like this:

```
/*
Theme Name: <%= name %>
Theme URI: THEME SITE HERE
Author: YOUR NAME HERE
Author URI: YOUR SITE HERE
Description: THEME DESCRIPTION HERE
Version: 0.1.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Tags: YOUR TAGS HERE
Text Domain: <%= slug %>
*/
```

`index.php` file with the basic template for your theme.
<% } %>

## Add your own containers

Because wordup is based on docker-compose, it's possible to extend a project with containers of your choice. 
If you want to integrate for example phpMyAdmin, you just have to create a file called `docker-compose.yml` in the root folder of your project, with this content:

```
version: '3'

services:
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      - PMA_HOST=db
      - PMA_USER=wordpress
      - PMA_PASSWORD=wordpress
    ports:
      - 8080:80
```

That's it, all your wordup commands will stay the same. But now also phpMyAdmin is running on port 8080, when you start your project servers.

## Contributing

[wordup-cli](https://github.com/wordup-dev/wordup-cli) is an open-source project. Development of wordup-cli happens in the open on GitHub. 
Fell free to join us.